akka {
  loglevel = "INFO"

  actor {
    provider = cluster

    # FIXED: Improved serialization configuration
    serialization-bindings {
      "ai.akka.cache.CacheActor$Command" = java
      "ai.akka.cache.CacheActor$Response" = java
      "ai.akka.cache.CacheActor$Get" = java
      "ai.akka.cache.CacheActor$Put" = java
      "ai.akka.cache.CacheActor$Delete" = java
      "ai.akka.cache.CacheActor$Found" = java
      "ai.akka.cache.CacheActor$NotFound" = java
      "ai.akka.cache.CacheActor$Done" = java
    }

    # Allow java serialization for internal messages
    allow-java-serialization = on
    warn-about-java-serializer-usage = off

    # FIXED: Additional serializer settings
    serializers {
      java = "akka.serialization.JavaSerializer"
    }
  }

  # Cluster configuration
  cluster {
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:2551"
    ]

    # FIXED: Minimum number of members for testing
    min-nr-of-members = 1

    # FIXED: Increase auto-down time for stability
    auto-down-unreachable-after = 20s

    # FIXED: Cluster sharding configuration optimized for development
    sharding {
      # Number of shards - good for small clusters
      number-of-shards = 10

      # Retry settings for shard allocation
      retry-interval = 2s

      # Handoff timeout
      handoff-timeout = 60s

      # Passivation settings - keep entities alive longer for testing
      passivate-idle-entity-after = 10m

      # FIXED: Use ddata state store (recommended over persistence)
      state-store-mode = ddata
      remember-entities = false

      # Coordinator settings
      coordinator-singleton = {
        # Singleton manager settings
        role = ""
      }

      # FIXED: Rebalancing settings for development
      rebalance-interval = 10s

      # Waiting time before shard allocation
      waiting-for-state-timeout = 5s

      # Updating state timeout
      updating-state-timeout = 5s
    }
  }

  # Persistence (in-memory for simplicity)
  persistence {
    journal.plugin = "akka.persistence.journal.inmem"
    snapshot-store.plugin = "akka.persistence.snapshot-store.local"
    snapshot-store.local.dir = "target/snapshot-store"
  }

  # Remote configuration for cluster communication
  remote.artery {
    canonical.hostname = "127.0.0.1"
    canonical.port = 2551  # Will be overridden by command line args

    # FIXED: Advanced settings for better cluster performance
    advanced {
      maximum-frame-size = 1 MiB
      buffer-pool-size = 128
      maximum-large-frame-size = 8 MiB

      # Connection settings
      connection-timeout = 15s

      # Idle timeout
      idle-timeout {
        outbound = 120s
        inbound = 600s
      }
    }
  }

  # HTTP configuration
  http {
    server {
      idle-timeout = 60s
      request-timeout = 30s
      bind-timeout = 10s
    }
  }

  # FIXED: Coordinated shutdown configuration for cluster mode
  coordinated-shutdown {
    # Only exit JVM when explicitly requested (not on main thread exit)
    exit-jvm = off

    # Keep actor system running until explicit termination
    terminate-actor-system = on

    # Don't run shutdown on JVM shutdown hook automatically
    # We handle this in our application with CountDownLatch
    run-by-jvm-shutdown-hook = off

    # FIXED: Increase timeouts for proper cluster shutdown
    default-phase-timeout = 30s

    phases {
      # Allow more time for cluster leaving
      cluster-exiting {
        timeout = 20s
      }

      # Allow more time for cluster shutdown
      cluster-shutdown {
        timeout = 15s
      }

      # Allow more time for HTTP unbinding
      service-unbind {
        timeout = 10s
      }

      # Allow more time for sharding shutdown
      cluster-sharding-shutdown-region {
        timeout = 30s
      }
    }
  }
}

# Custom application settings
cache {
  nodes = 3
  replication-factor = 2
  default-consistency = "QUORUM"

  # Sharding settings
  sharding {
    number-of-shards = 10
    passivate-idle-after = "10m"
    remember-entities = false
    role = "cache"
  }

  # Performance settings
  bulk-operations {
    batch-size = 100
    max-parallelism = 8
  }

  # Monitoring settings
  monitoring {
    consistency-check-interval = 5s
    metrics-collection = true
  }
}